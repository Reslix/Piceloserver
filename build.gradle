plugins {
    id 'org.springframework.boot' version '2.7.0-M1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.scryer'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sourceSets {
    main {
        output.resourcesDir = "build/classes/java/main"
    }
    test {
        output.resourcesDir = "build/classes/java/test"
    }
}

repositories {
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    mavenCentral()
}

ext {
    set('springCloudVersion', "2021.0.1-SNAPSHOT")
}

dependencies {
    //implementation 'org.springframework.boot:spring-boot-starter-graphql'
    //implementation 'org.springframework.boot:spring-boot-starter-mail'
    //implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.cloud:spring-cloud-function-web'
    implementation 'org.springframework.cloud:spring-cloud-starter'
    implementation 'org.springframework.cloud:spring-cloud-starter-task'
    implementation 'org.springframework.security:spring-security-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2',
            // Uncomment the next line if you want to use RSASSA-PSS (PS256, PS384, PS512) algorithms:
            //'org.bouncycastle:bcprov-jdk15on:1.60',
            'io.jsonwebtoken:jjwt-jackson:0.11.2'
    // or 'io.jsonwebtoken:jjwt-gson:0.11.2' for gson	implementation 'software.amazon.awssdk:dynamodb'
    implementation 'software.amazon.awssdk:dynamodb-enhanced'
    implementation 'software.amazon.awssdk:s3'
    implementation 'org.openpnp:opencv'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    //testImplementation 'org.springframework.graphql:spring-graphql-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "software.amazon.awssdk:bom:2.17.129"
    }
}

tasks.named('test') {
    file('.env').readLines().each() {
        def (key, value) = it.tokenize('=')
        environment(key, value)
    }
    useJUnitPlatform()
}

bootRun {
    file('.env').readLines().each() {
        def (key, value) = it.tokenize('=')
        environment(key, value)
    }
}